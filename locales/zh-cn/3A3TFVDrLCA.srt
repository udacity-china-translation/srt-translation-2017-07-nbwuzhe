1
00:00:00,790 --> 00:00:02,560
迄今为止 我们主要是运用计算机

2
00:00:02,560 --> 00:00:04,770
对数字进行计算

3
00:00:04,770 --> 00:00:07,830
在计算机发展初期

4
00:00:07,830 --> 00:00:11,900
人们仅仅把它看作是强有力的超级计算器

5
00:00:11,900 --> 00:00:16,760
用来完成一些比简单算数稍强的计算性质工作

6
00:00:16,760 --> 00:00:20,300
比如核武器模拟 弹道表计算 或者破解密码

7
00:00:20,300 --> 00:00:23,230
这些工作基本上都集中在计数和简单的算术领域

8
00:00:23,230 --> 00:00:25,790
图中的这句话是早期 Grace Hopper 对计算机的看法

9
00:00:25,790 --> 00:00:29,690
她认为计算机只能做算术工作

10
00:00:29,690 --> 00:00:32,890
这也是20世纪40年代到50年代 人们对计算机的普遍观点

11
00:00:32,890 --> 00:00:35,990
但是我们没有理由将计算机局限于此

12
00:00:35,990 --> 00:00:38,620
它们可以处理任何我们想要处理的数据

13
00:00:38,620 --> 00:00:41,250
当计算机能够处理除数字以外的数据时 它将变得更加有趣

14
00:00:41,250 --> 00:00:44,250
如果我们要创建一个搜索引擎

15
00:00:44,250 --> 00:00:46,800
我们要处理的大部分数据不是数字

16
00:00:46,800 --> 00:00:51,050
而是网页中包含的字母 在 Python 中

17
00:00:51,050 --> 00:00:53,454
我们称之为字符串 字符串就是被引号包围的一组字符序列

18
00:00:53,454 --> 00:00:56,841
这是一个 Python 字符串的例子

19
00:00:56,841 --> 00:00:59,529
它由一个单引号开始 紧接着是一组字符序列

20
00:00:59,529 --> 00:01:02,441
用键盘能输入的任何字符都可以作为字符串的一部分

21
00:01:02,441 --> 00:01:06,030
字符串以另一个单引号结束

22
00:01:06,030 --> 00:01:09,890
字符串就是在这对单引号之间的一组字符序列

23
00:01:09,890 --> 00:01:12,600
也可以使用双引号来替代单引号

24
00:01:12,600 --> 00:01:16,160
如果我们使用双引号 那就用双引号来作为这个字符串的开始

25
00:01:16,160 --> 00:01:18,670
而后是一组字符序列 最后以另一个双引号结束

26
00:01:18,670 --> 00:01:22,600
唯一的要求就是 如果我们用单引号作为字符串的开始

27
00:01:22,600 --> 00:01:24,380
那么结尾处也要使用单引号

28
00:01:24,380 --> 00:01:27,460
如果我们使用双引号作为开始

29
00:01:27,460 --> 00:01:30,280
那么结尾处也要使用双引号

30
00:01:30,280 --> 00:01:33,820
这其实是个很灵活的属性 意味着我们可以在字符串中使用另一种引号

31
00:01:33,820 --> 00:01:36,690
这个字符串以双引号开始

32
00:01:36,690 --> 00:01:41,390
里面包含了一个单引号 但是因为它是以双引号开始的

33
00:01:41,390 --> 00:01:44,280
所以这个字符串不以这个单引号而结束

34
00:01:44,280 --> 00:01:47,060
这个单引号就相当于字符串中的一般字符

35
00:01:47,060 --> 00:01:51,150
字符串继续 直到用来结束它的双引号

36
00:01:51,150 --> 00:01:55,150
我们用 Python 解释器来试一下

37
00:01:55,150 --> 00:01:57,680
我们可以像输出数字一样来输出一个字符串

38
00:01:57,680 --> 00:02:01,170
这里我想要输出字符串 Hello 当我运行这段代码的时候

39
00:02:01,170 --> 00:02:03,780
我们可以看到解释器输出 Hello

40
00:02:03,780 --> 00:02:06,770
在屏幕显示的结果中 我们没有看到单引号

41
00:02:06,770 --> 00:02:09,860
但是我们知道这是一个输出的字符串 我们也可以输出一个带双引号的字符串

42
00:02:11,130 --> 00:02:13,260
需要注意的是当你在解释器中输入字符串的时候

43
00:02:13,260 --> 00:02:16,440
它的颜色是黑的

44
00:02:16,440 --> 00:02:20,550
因为这是一个开放字符串 还没有完成 一旦我输入结束的双引号

45
00:02:20,550 --> 00:02:23,820
这个字符串就完成了 颜色就会变成蓝色

46
00:02:23,820 --> 00:02:26,210
所以当我们运行这段代码时 就得到两个输出结果

47
00:02:26,210 --> 00:02:28,920
输出均为 Hello 两个结果是一样的

48
00:02:28,920 --> 00:02:32,230
所以使用单引号或双引号来包围字符串都是可以的

49
00:02:32,230 --> 00:02:35,920
但是我要做另一个尝试来强调一件事

50
00:02:35,920 --> 00:02:38,340
现在我输入不加引号的 Hello

51
00:02:39,520 --> 00:02:42,420
你可以猜猜结果是什么 这不是一个测验

52
00:02:42,420 --> 00:02:45,010
但是在我运行这段代码之前你可以试着猜一下结果

53
00:02:47,490 --> 00:02:50,200
现在我来运行它 我们可以看到结果

54
00:02:50,200 --> 00:02:52,200
我们得到一个 name error 告诉我们 Hello 没有被定义

55
00:02:52,200 --> 00:02:56,040
如果不加引号 它将是一个变量

56
00:02:56,040 --> 00:02:58,250
它是一个变量名 但是是一个我们没有定义的变量

57
00:02:58,250 --> 00:03:01,150
所以当我尝试调用它的时候

58
00:03:01,150 --> 00:03:04,550
就会出现错误 并指出变量名 Hello 没有被定义

59
00:03:06,350 --> 00:03:08,530
我可以定义一个名为 Hello 的变量

60
00:03:08,530 --> 00:03:13,590
现在让 Hello 指代字符串 Howdy

61
00:03:13,590 --> 00:03:17,790
现在当我打印 Hello 时 它就可以运行

62
00:03:17,790 --> 00:03:20,760
前两个字符串输出的结果是 Hello 现在当我输出变量 Hello 时

63
00:03:20,760 --> 00:03:23,380
它是指向字符串 Howby 的 然后输出结果就是 Howby

64
00:03:23,380 --> 00:03:26,450
通常我们不以大写字母作为变量名的开始

65
00:03:26,450 --> 00:03:29,510
这只是一个传统 所以我要把这个变量名改为小写的 hello

66
00:03:29,510 --> 00:03:33,630
因为变量中有大写字母看起来很不舒服

67
00:03:33,630 --> 00:03:36,410
Python 没有明确规定禁止在变量名中使用大写字母

68
00:03:36,410 --> 00:03:38,980
这只是我们遵循的一个传统
